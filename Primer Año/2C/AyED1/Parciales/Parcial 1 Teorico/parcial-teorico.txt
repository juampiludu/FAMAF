9)
    tieneLargo.xs = 〈 ∃ i : 0 ≤ i < #xs : #xs = xs!i 〉

    HI:

    tieneLargo.(x:xs) = 〈 ∃ i : 0 ≤ i < #(x:xs) : #(x:xs)) = (x:xs)!i 〉
    ≡ {def de #}
    tieneLargo.(x:xs) = 〈 ∃ i : 0 ≤ i < #xs+1 : #xs+1 = (x:xs)!i 〉
    ≡ {cambio de variable, i:=(j+1)}
    tieneLargo.(x:xs) = 〈 ∃ j : 0 ≤ (j+1) < #xs+1 : #xs+1 = (x:xs)!(j+1) 〉
    ≡ {logica}
    tieneLargo.(x:xs) = 〈 ∃ j : i = 0 ∨ ≤ (j+1) < #xs+1 : #xs+1 = (x:xs)!(j+1) 〉
    ≡ {particion de rango}
    tieneLargo.(x:xs) = 〈 ∃ j : i = 0 : #xs+1 = (x:xs)!(j+1) 〉 ∧ 〈 ∃ j : 1 ≤ (j+1) < #xs+1 : #xs+1 = (x:xs)!(j+1) 〉
    ≡ {def de !}
    tieneLargo.(x:xs) = 〈 ∃ j : i = 0 : #xs+1 = xs!j 〉 ∧ 〈 ∃ j : 1 ≤ (j+1) < #xs+1 : #xs+1 = xs!j 〉
    ≡ {rango unitario}
    tieneLargo.(x:xs) = #xs+1 = xs!0 ∧ 〈 ∃ j : 1 ≤ (j+1) < #xs+1 : #xs+1 = xs!j 〉
    ≡ {compatibilidad de la suma y el orden}
    tieneLargo.(x:xs) = #xs+1 = xs!0 ∧ 〈 ∃ j : 0 ≤ j < #xs : #xs+1 = xs!j 〉
    ≡ {no se puede seguir, hay que generalizar}








    HI:

    tieneLargoGen.xs.k = 〈 ∃ i : 0 ≤ i < #xs : #xs+k = (xs!i) 〉

    tieneLargo.(x:xs).(k-1) = 〈 ∃ i : 0 ≤ i < #(x:xs) : #(x:xs)+(k-1) = (x:xs)!i 〉
    ≡ {def de #}
    tieneLargo.(x:xs).(k-1) = 〈 ∃ i : 0 ≤ i < (#xs+1) : (#xs+1)+(k-1) = (x:xs)!i 〉
    ≡ {aritmetica}
    tieneLargo.(x:xs).(k-1) = 〈 ∃ i : 0 ≤ i < #xs+1 : #xs+k = (x:xs)!i 〉
    ≡ {logica}
    tieneLargo.(x:xs).(k-1) = 〈 ∃ i : i = 0 ∨ 1 ≤ i < #xs+1 : #xs+k = (x:xs)!i 〉
    ≡ {particion de rango}
    tieneLargo.(x:xs).(k-1) = 〈 ∃ i : i = 0 : #xs+k = (x:xs)!i 〉 ∧ 〈 ∃ i : 1 ≤ i < #xs+1 : #xs+k = (x:xs)!i 〉
    ≡ {rango unitario}
    tieneLargo.(x:xs).(k-1) = #xs+k = (x:xs)!0 ∧ 〈 ∃ i : 1 ≤ i < #xs+1 : #xs+k = (x:xs)!i 〉
    ≡ {def de !}
    tieneLargo.(x:xs).(k-1) = #xs+k = x ∧ 〈 ∃ i : 1 ≤ i < #xs+1 : #xs+k = (x:xs)!i 〉
    ≡ {cambio de variable, i:=(j+1)}
    tieneLargo.(x:xs).(k-1) = #xs+k = x ∧ 〈 ∃ j : 1 ≤ (j+1) < #xs+1 : #xs+k = (x:xs)!(j+1) 〉
    ≡ {compatibilidad de la suma y el orden}
    tieneLargo.(x:xs).(k-1) = #xs+k = x ∧ 〈 ∃ j : 0 ≤ j < #xs : #xs+k = (x:xs)!(j+1) 〉
    ≡ {def de !}
    tieneLargo.(x:xs).(k-1) = #xs+k = x ∧ 〈 ∃ j : 0 ≤ j < #xs : #xs+k = xs!j 〉
    ≡ {HI}
    tieneLargo.(x:xs).(k-1) = #xs+k = x ∧ tieneLargoGen.xs.k


map.(+1).[1,2,3]
1+1: map.(+1).[2,3]
2: 1+2 map.(+1).[3]
2: 3: 1+3: map.(+1).[]
2: 3: 4: []
2: 3: [4]
2: [3,4]
[2,3,4]