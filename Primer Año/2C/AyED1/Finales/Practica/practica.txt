1.

hocho.xs =〈 ∀ as,bs : xs = as ++ bs :〈 Σ i : 0 ≤ i < #bs : (bs!i)^2 〉≤ 88 〉

Modularizamos (bs!i)^2 como exp2.x = x.x => exp2.(bs!i)

a.

Derivacion:

Caso base:

hocho.[] =〈 ∀ as,bs : [] = as ++ bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

≡ {prop de listas}

hocho.[] =〈 ∀ as,bs : as = [] ∧ bs = [] :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

≡ {elim de variables}

hocho.[] =〈 ∀ : [] = [] ∧ [] = [] :〈 Σ i : 0 ≤ i < #[] : exp2.([]!i) 〉≤ 88 〉

≡ {logica}

hocho.[] =〈 ∀ : :〈 Σ i : 0 ≤ i < #[] : exp2.([]!i) 〉≤ 88 〉

≡ {def de #}

hocho.[] =〈 ∀ : :〈 Σ i : 0 ≤ i < 0 : exp2.([]!i) 〉≤ 88 〉

≡ {logica}

hocho.[] =〈 ∀ : :〈 Σ i : False : exp2.([]!i) 〉≤ 88 〉

≡ {rango vacio}

hocho.[] =〈 ∀ : : 0 ≤ 88 〉

≡ {logica}

hocho.[] = True

Caso inductivo:

HI: hocho.xs =〈 ∀ as,bs : xs = as ++ bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

xs = (x:xs)

hocho.(x:xs) =〈 ∀ as,bs : x:xs = as ++ bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

≡ {particion de ++}

hocho.(x:xs) =〈 ∀ as,bs : (as = [] ∧ x:xs = as ++ bs) ∨ (as != [] ∧ x:xs = as ++ bs) :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

≡ {particion de rango}

hocho.(x:xs) =〈 ∀ as,bs : as = [] ∧ x:xs = as ++ bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧〈 ∀ as,bs : as != [] ∧ x:xs = as ++ bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

≡ {elim de variable as = []}

hocho.(x:xs) =〈 ∀ bs : x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧〈 ∀ as,bs : as != [] ∧ x:xs = as ++ bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

≡ {cambio de variable a,as -> a:as y prop de listas}

hocho.(x:xs) =〈 ∀ bs : x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧〈 ∀ a,as,bs : x:xs = (a:as) ++ bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

≡ {prop de listas}

hocho.(x:xs) =〈 ∀ bs : x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧〈 ∀ a,as,bs : x = a ∧ xs = as ++ bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

≡ {elim de variable x=a}

hocho.(x:xs) =〈 ∀ bs : x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧〈 ∀ as,bs : xs = as ++ bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉

≡ {HI}

hocho.(x:xs) =〈 ∀ bs : x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {prop listas a bs}

hocho.(x:xs) =〈 ∀ bs : (bs = [] ∧ x:xs = bs) ∨ (bs != [] ∧ x:xs = bs) :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {particion de rango}

hocho.(x:xs) =〈 ∀ bs : bs = [] ∧ x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧〈 ∀ bs : bs != [] ∧ x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {elim de variable bs = []}

hocho.(x:xs) =〈 ∀ : x:xs = [] :〈 Σ i : 0 ≤ i < #[] : exp2.([]!i) 〉≤ 88 〉∧〈 ∀ bs : bs != [] ∧ x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {def de #}

hocho.(x:xs) =〈 ∀ : x:xs = [] :〈 Σ i : 0 ≤ i < 0 : exp2.([]!i) 〉≤ 88 〉∧〈 ∀ bs : bs != [] ∧ x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {logica y rango vacio}

hocho.(x:xs) =〈 ∀ : x:xs = [] : 0 ≤ 88 〉∧〈 ∀ bs : bs != [] ∧ x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {rango unitario}

hocho.(x:xs) = 0 ≤ 88 ∧〈 ∀ bs : bs != [] ∧ x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {logica}

hocho.(x:xs) =〈 ∀ bs : bs != [] ∧ x:xs = bs :〈 Σ i : 0 ≤ i < #bs : exp2.(bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {cambio de variable b,bs -> b:bs}

hocho.(x:xs) =〈 ∀ b,bs : x = b ∧ x:xs = b:bs :〈 Σ i : 0 ≤ i < #(b:bs) : exp2.(b:bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {elim de variable x = b}

hocho.(x:xs) =〈 ∀ bs : x:xs = b:bs :〈 Σ i : 0 ≤ i < #(b:bs) : exp2.(b:bs!i) 〉≤ 88 〉∧ hocho.xs

≡ {rango unitario}

hocho.(x:xs) =〈 Σ i : 0 ≤ i < #(x:xs) : exp2.(x:xs!i) 〉≤ 88 ∧ hocho.xs

≡ {def de #}

hocho.(x:xs) =〈 Σ i : 0 ≤ i < #xs + 1 : exp2.(x:xs!i) 〉≤ 88 ∧ hocho.xs

≡ {logica y particion de rango}

hocho.(x:xs) = (〈 Σ i : i = 0 : exp2.(x:xs!i) 〉+〈 Σ i : 1 ≤ i < #xs + 1 : exp2.(x:xs!i) 〉) ≤ 88 ∧ hocho.xs

≡ {rango unitario}

hocho.(x:xs) = ( exp2.(x:xs!0) +〈 Σ i : 1 ≤ i < #xs + 1 : exp2.(x:xs!i) 〉) ≤ 88 ∧ hocho.xs

≡ {def de !}

hocho.(x:xs) = ( exp2.x +〈 Σ i : 1 ≤ i < #xs + 1 : exp2.(x:xs!i) 〉) ≤ 88 ∧ hocho.xs

≡ {cambio de variable i:=i+1}

hocho.(x:xs) = ( exp2.x +〈 Σ i : 1 ≤ i + 1 < #xs + 1 : exp2.(x:xs!i+1) 〉) ≤ 88 ∧ hocho.xs

≡ {suma y orden}{def de !}

hocho.(x:xs) = ( exp2.x +〈 Σ i : 0 ≤ i < #xs : exp2.(xs!i) 〉) ≤ 88 ∧ hocho.xs

****

No se puede seguir, por lo que debemos modularizar el cuantificador:

sumExp2.xs =〈 Σ i : 0 ≤ i < #xs : exp2.(xs!i) 〉

Caso base:

sumExp2.[] =〈 Σ i : 0 ≤ i < #[] : exp2.([]!i) 〉

≡ {def de #}

sumExp2.[] =〈 Σ i : 0 ≤ i < 0 : exp2.([]!i) 〉

≡ {logica y rango vacio}

sumExp2.[] = 0

Caso inductivo:

HI: sumExp2.xs =〈 Σ i : 0 ≤ i < #xs : exp2.(xs!i) 〉

sumExp2.(x:xs) =〈 Σ i : 0 ≤ i < #(x:xs) : exp2.((x:xs)!i) 〉

≡ {def de #}

sumExp2.(x:xs) =〈 Σ i : 0 ≤ i < #xs + 1 : exp2.((x:xs)!i) 〉

≡ {logica y particion de rango}

sumExp2.(x:xs) =〈 Σ i : i = 0 : exp2.((x:xs)!i) 〉+〈 Σ i : 1 ≤ i < #xs + 1 : exp2.((x:xs)!i) 〉

≡ {rango unitario}

sumExp2.(x:xs) = exp2.((x:xs)!0) +〈 Σ i : 1 ≤ i < #xs + 1 : exp2.((x:xs)!i) 〉

≡ {def de !}

sumExp2.(x:xs) = exp2.x +〈 Σ i : 1 ≤ i < #xs + 1 : exp2.((x:xs)!i) 〉

≡ {i:=i+1}

sumExp2.(x:xs) = exp2.x +〈 Σ j : 1 ≤ j+1 < #xs + 1 : exp2.((x:xs)!j+1) 〉

≡ {suma y orden}{def de !}

sumExp2.(x:xs) = exp2.x +〈 Σ j : 0 ≤ j < #xs : exp2.(xs!j) 〉

≡ {HI}

sumExp2.(x:xs) = exp2.x + sumExp2.xs

****

≡ {reemplazamos por el resultado de modularizar el cuantificador}

hocho.(x:xs) = ( exp2.x + sumExp2.xs ) ≤ 88 ∧ hocho.xs

≡ {def de sumExp2}

hocho.x:xs = sumExp2.x:xs ≤ 88 ∧ hocho.xs



2.

Const N : Int;
Var A : array [0, N) of Int;
    r : Bool;
{N ≥ 0}
S
{r =〈 ∃ i : 0 ≤ i ≤ N :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉}


a.

r =〈 ∃ i : 0 ≤ i ≤ N :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉

A = [3, −1, −1, −1]

Como A tiene 4 elementos, entonces N=4. Vemos que se cumple la precondicion N>=0.

i ∈ (0,1,2,3,4)

Caso i=0

〈 Σ j : 0 ≤ j < 0 : A.j 〉

≡ {rango vacio}

0 = -1

≡ {logica}

False


Caso i=1

〈 Σ j : 0 ≤ j < 1 : A.j 〉

≡ {j=0}

3 = -1

≡ {logica}

False


Caso i=2

〈 Σ j : 0 ≤ j < 2 : A.j 〉

≡ {j=0,1}

3 + (-1) = -1

≡ {aritmetica}

2 = -1

≡ {logica}

False


Caso i = 3

〈 Σ j : 0 ≤ j < 3 : A.j 〉

≡ {j=0,1,2}

3 - 1 - 1 = -1

≡ {aritmetica}

1 = -1

≡ {logica}

False


Caso i=4

〈 Σ j : 0 ≤ j < 4 : A.j 〉

≡ {j=0,1,2,3}

3 - 1 - 1 - 1 = -1

≡ {aritmetica}

0 = -1

≡ {logica}

False


b. Busco que la sumatoria de los elementos de A hasta cierto i, den como resultado -1.

c.

Const N : Int;
Var A : array [0, N) of Int;
    r : Bool;
{N ≥ 0}
S
{r =〈 ∃ i : 0 ≤ i ≤ N :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉}

Derivacion:

Voy a hacer un ciclo con inicializacion anterior.

{N ≥ 0}
S0
{I}
do B ->
    {I ∧ B}
    S1
    n := n+1
    {I}
od
{r =〈 ∃ i : 0 ≤ i ≤ N :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉}

Vamos a derivar el cuerpo del ciclo.
Propongo B: n<N
Una invariante puede ser I: {r =〈 ∃ i : 0 ≤ i ≤ n :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= n <= N}

Busco una cota tal que I ∧ ¬B => Q

r =〈 ∃ i : 0 ≤ i ≤ n :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= n <= N ∧ n>=N 
=> 
r =〈 ∃ i : 0 ≤ i ≤ N :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉

≡ {logica}

r =〈 ∃ i : 0 ≤ i ≤ n :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ n=N 
=> 
r =〈 ∃ i : 0 ≤ i ≤ N :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉

≡ {premisa n=N}

True

Propongo la cota t=N-n >= 0

Ahora, derivemos el cuerpo del ciclo con una asignacion multiple:

{r =〈 ∃ i : 0 ≤ i ≤ n :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= n <= N ∧ n<N ∧ N-n = T}
n, r := E, F
{r =〈 ∃ i : 0 ≤ i ≤ n :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= n <= N ∧ N-n < T}

≡ {Obligacion de prueba}

{r =〈 ∃ i : 0 ≤ i ≤ n :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= n <= N ∧ n<N ∧ N-n = T}
=>
{F =〈 ∃ i : 0 ≤ i ≤ E :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= E <= N ∧ N-E < T}

≡ {probemos con E:=n+1}

{F =〈 ∃ i : 0 ≤ i ≤ n+1 :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= n+1 <= N ∧ N-n-1 < T}

≡ {0 <= n+1 <= N es True, ya que n<N}{N-1=T => N-n-1 < T}

F =〈 ∃ i : 0 ≤ i ≤ n+1 :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉

≡ {particion de rango}

F =〈 ∃ i : 0 ≤ i ≤ n :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∨〈 ∃ i : i = n+1 :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉

≡ {por def de r}

F = r ∨〈 ∃ i : i = n+1 :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉

≡ {rango unitario}

F = r ∨〈 Σ j : 0 ≤ j < n+1 : A.j 〉= −1

≡ {particion de rango}

F = r ∨〈 Σ j : 0 ≤ j < n : A.j 〉+〈 Σ j : j = n : A.j 〉= −1

≡ {rango unitario}

F = r ∨〈 Σ j : 0 ≤ j < n : A.j 〉+ A.n = −1

≡ {Fortalezco el invariante para poder programar la sumatoria, agrego s =〈 Σ j : 0 ≤ j < n : A.j 〉}
≡ {Sumo la asignacion de s := R al cuerpo del bucle para mantener el invariante}

F = r ∨〈 Σ j : 0 ≤ j < n : A.j 〉+ A.n = −1 ∧ R =〈 Σ j : 0 ≤ j < n : A.j 〉

≡ {hip del valor de s}

F = r ∨ s + A.n = −1 ∧ R =〈 Σ j : 0 ≤ j < n : A.j 〉

≡ {particion de rango}

F = r ∨ s + A.n = −1 ∧ R =〈 Σ j : 0 ≤ j < n : A.j 〉+〈 Σ j : j = n : A.j 〉

≡ {rango unitario e hip del valor de s}

F = r ∨ s + A.n = −1 ∧ R = s + A.n

Ahora, hay que derivar la inicializacion de las variables:

{N ≥ 0}
r, n, s := R, E, S
{r =〈 ∃ i : 0 ≤ i ≤ n :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= n <= N ∧ s =〈 Σ j : 0 ≤ j < n : A.j 〉}

≡ {Obligacion de prueba}

{N ≥ 0}
=>
{R =〈 ∃ i : 0 ≤ i ≤ E :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= E <= N ∧ S =〈 Σ j : 0 ≤ j < E : A.j 〉}

≡ {Propongo E:=0 y R:=False}

False =〈 ∃ i : 0 ≤ i ≤ 0 :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ 0 <= 0 <= N ∧ S =〈 Σ j : 0 ≤ j < 0 : A.j 〉

≡ {logica}{premisa N>=0}

False =〈 ∃ i : False :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉∧ S =〈 Σ j : False : A.j 〉

≡ {rango vacio x2}

False = False ∧ S = 0

≡ {logica}

False = False

≡ {reflexividad del =}

True


El programa queda así

Const N : Int;
Var A : array [0, N) of Int;
Var r : Bool, n : Int, s : Int;
{N ≥ 0}
    r, n, s := False, 0, 0;
    do n<N ->
        r, n, s := r ∨ s + A.n = −1, s + A.n, n+1
    od
{r =〈 ∃ i : 0 ≤ i ≤ N :〈 Σ j : 0 ≤ j < i : A.j 〉= −1 〉}


3.

a.

Const N : Int;
Var A : array [0, N) of Int;
Var r : Bool;
{N>=0}
S
{r =〈 ∀ i : 0 <= i < N : A.i = 2^n〉}

b.

Const N : Int;
Var A : array [0, N) of Int;
Var r : Bool;
{N>=0}
S
{r =〈 ∃ i : 0 <= i < N :〈 Σ j : i <= j < N : A.j 〉>〈 Max u : 0 <= u < N : A.u〉〉}

Const N : Int, A : array[0, N) of Int;
Var r : Bool;
{N ≥ 0}
S
{r =〈 ∃ i : 0 ≤ i < N : A.i ≤ 3^i 〉}

El invariante seria: I: r =〈 ∃ i : 0 ≤ i < n : A.i ≤ 3^i 〉∧ 0<=n<=N ∧ pot = 3^n

Propongo hacer un ciclo:

{N ≥ 0}
S0
{I}
do B ->
    {I ∧ B}
    S1
    {I}
od
{r =〈 ∃ i : 0 ≤ i < N : A.i ≤ 3^i 〉}


Derivamos el cuerpo del ciclo:
Podemos probar con las asignaciones r, n, pot.
Propongo B: n<N

I: r =〈 ∃ i : 0 ≤ i < n : A.i ≤ 3^i 〉∧ 0<=n<=N ∧ pot = 3^n

{r =〈 ∃ i : 0 ≤ i < n : A.i ≤ 3^i 〉∧ 0<=n<=N ∧ pot = 3^n ∧ n<N}
r, n, pot := R, E, F
{r =〈 ∃ i : 0 ≤ i < n : A.i ≤ 3^i 〉∧ 0<=n<=N ∧ pot = 3^n}

≡ {Obligacion de prueba}

{r =〈 ∃ i : 0 ≤ i < n : A.i ≤ 3^i 〉∧ 0<=n<=N ∧ pot = 3^n ∧ n<N}
=>
{R =〈 ∃ i : 0 ≤ i < E : A.i ≤ 3^i 〉∧ 0<=E<=N ∧ F = 3^E}

≡ {podemos probar con E:=n+1}

R =〈 ∃ i : 0 ≤ i < n+1 : A.i ≤ 3^i 〉∧ 0<=n+1<=N ∧ F = 3^(n+1)

≡ {hip n<N => n+1<=N}{hip pot = 3^n}

R =〈 ∃ i : 0 ≤ i < n+1 : A.i ≤ 3^i 〉∧ F = pot * 3

≡ {particion de rango y logica}

R =〈 ∃ i : 0 ≤ i < n : A.i ≤ 3^i 〉∨〈 ∃ i : i = n : A.i ≤ 3^i 〉∧ F = pot * 3

≡ {hip valor de r y rango unitario}

R = r ∨ A.n ≤ 3^n ∧ F = pot * 3

≡ {hip valor de pot}

R = r ∨ A.n ≤ pot ∧ F = pot * 3


Busco una cota tal que I ∧ ¬B => Q
Propongo la cota t = N-n

{I ∧ ¬B ∧ N-n = T}
r, n, pot := r ∨ A.n ≤ pot, n+1, pot * 3
{Q ∧ N-n < T}

≡

N-n-1 < N-1

≡

True


Ahora derivamos la inicializacion:

{N ≥ 0}
r, n, pot = R0, E0, F0
{r =〈 ∃ i : 0 ≤ i < n : A.i ≤ 3^i 〉∧ 0<=n<=N ∧ pot = 3^n}

≡ {Obligacion de prueba}

{N ≥ 0}
=>
{R0 =〈 ∃ i : 0 ≤ i < E0 : A.i ≤ 3^i 〉∧ 0<=E0<=N ∧ F0 = 3^E0}

≡ {Propongo R0:=False, E0:=0, F0:=1}

False =〈 ∃ i : 0 ≤ i < 0 : A.i ≤ 3^i 〉∧ 0<=0<=N ∧ 1 = 3^0

≡ {logica}{hip N>=0}{aritmetica}

False =〈 ∃ i : False : A.i ≤ 3^i 〉

≡ {rango vacio}

False = False

≡ {reflexividad del =}

True


El programa queda asi:

Const N : Int, A : array[0, N) of Int;
Var r : Bool, n : Int, pot : Int;
{N ≥ 0}
r, n, pot = False, 0, 1
do n<N ->
    r, n, pot := r ∨ A.n ≤ pot, n+1, pot * 3
od
{r =〈 ∃ i : 0 ≤ i < N : A.i ≤ 3^i 〉}


FINAL 2021 10 FEB

1.

a. f.xs = "La suma de los numeros pares de xs es mayor que la suma de numeros impares de xs”.

    f.xs =〈 Σ j : 0 <= j < #xs : A.j mod 2 != 0 〉<〈 Σ i : 0 <= i < #xs : A.i mod 2 == 0 〉

b. 

    f :: [Int] -> Bool
    f.[] = True


2.

h.xs =〈 ∃ k : 0 <= k < #xs : sum(xs ↑ k) > k 〉

a.

h.[] =〈 ∃ k : 0 <= k < #[] : sum([] ↑ k) > k 〉

≡ {def de # y def de ↑}

h.[] =〈 ∃ k : 0 <= k < 0 : [] > k 〉

≡ {logica}

h.[] =〈 ∃ k : False : [] > k 〉

≡ {rango vacio}

h.[] = False


b. Capaz


c. 

HI: h.xs =〈 ∃ k : 0 <= k < #xs : sum(xs ↑ k) > k 〉

h.(x:xs) =〈 ∃ k : 0 <= k < #(x:xs) : sum((x:xs) ↑ k) > k 〉

≡ {def de #}

h.(x:xs) =〈 ∃ k : 0 <= k < #xs+1 : sum((x:xs) ↑ k) > k 〉

≡ {logica y particion de rango}

h.(x:xs) =〈 ∃ k : k = 0 : sum((x:xs) ↑ k) > k 〉∨〈 ∃ k : 1 <= k < #xs+1 : sum((x:xs) ↑ k) > k 〉

≡ {rango unitario}

h.(x:xs) = sum((x:xs) ↑ 0) > 0 ∨〈 ∃ k : 1 <= k < #xs+1 : sum((x:xs) ↑ k) > k 〉

≡ {def de ↑}

h.(x:xs) = sum([]) > 0 ∨〈 ∃ k : 1 <= k < #xs+1 : sum((x:xs) ↑ k) > k 〉

≡ {def de sum}{logica}

h.(x:xs) =〈 ∃ k : 1 <= k < #xs+1 : sum((x:xs) ↑ k) > k 〉

≡ {k:=k+1}

h.(x:xs) =〈 ∃ k : 1 <= k+1 < #xs+1 : sum((x:xs) ↑ k+1) > k+1 〉

≡ {suma y orden}{def de ↑}

h.(x:xs) =〈 ∃ k : 0 <= k < #xs : sum(x:(xs ↑ k)) > k+1 〉

≡ {def de sum}

h.(x:xs) =〈 ∃ k : 0 <= k < #xs : x + sum(xs ↑ k) > k+1 〉

****

Generalizamos porque no se puede aplicar la hipotesis con k+1
Generalizamos con j=1-x

hGen.xs.j =〈 ∃ k : 0 <= k < #xs : sum(xs ↑ k) > k+j 〉

Caso base:

hGen.[].j =〈 ∃ k : 0 <= k < #[] : sum([] ↑ k) > k+j 〉

≡ {def de # y ↑}

hGen.[].j =〈 ∃ k : 0 <= k < 0 : sum([]) > k+j 〉

≡ {logica y def de sum}

hGen.[].j =〈 ∃ k : False : 0 > k+j 〉

≡ {rango vacio}

hGen.[].j = False

Caso inductivo:

HI: hGen.xs.j =〈 ∃ k : 0 <= k < #xs : sum(xs ↑ k) > k+j 〉

hGen.(x:xs).j =〈 ∃ k : 0 <= k < #(x:xs) : sum((x:xs) ↑ k) > k+j 〉

≡ {def de #}

hGen.(x:xs).j =〈 ∃ k : 0 <= k < #xs+1 : sum((x:xs) ↑ k) > k+j 〉

≡ {logica y particion de rango}

hGen.(x:xs).j =〈 ∃ k : k=0 : sum((x:xs) ↑ k) > k+j 〉∨〈 ∃ k : 1 <= k < #xs+1 : sum((x:xs) ↑ k) > k+j 〉

≡ {rango unitario}

hGen.(x:xs).j = sum((x:xs) ↑ 0) > 0+j ∨〈 ∃ k : 1 <= k < #xs+1 : sum((x:xs) ↑ k) > k+j 〉

≡ {def de ↑ y aritmetica}

hGen.(x:xs).j = sum([]) > j ∨〈 ∃ k : 1 <= k < #xs+1 : sum((x:xs) ↑ k) > k+j 〉

≡ {def de sum}

hGen.(x:xs).j = 0 > j ∨〈 ∃ k : 1 <= k < #xs+1 : sum((x:xs) ↑ k) > k+j 〉

≡ {k:=k+1}
hGen.(x:xs).j = 0 > j ∨〈 ∃ k : 1 <= k+1 < #xs+1 : sum((x:xs) ↑ k+1) > k+1+j 〉

≡ {logica y def de ↑}

hGen.(x:xs).j = 0 > j ∨〈 ∃ k : 0 <= k < #xs : sum(x:(xs ↑ k)) > k+1+j 〉

≡ {def de sum}

hGen.(x:xs).j = 0 > j ∨〈 ∃ k : 0 <= k < #xs : x + sum(xs ↑ k) > k+1+j 〉

≡ {suma y orden}

hGen.(x:xs).j = 0 > j ∨〈 ∃ k : 0 <= k < #xs : sum(xs ↑ k) > k+1+j-x 〉

≡ {hipotesis con j = (1+j-x)}

hGen.(x:xs).j = 0 > j ∨ hGen.xs.(1+j-x)

Entonces sabemos que h.xs es el caso particular de hGen cuando j=0:

h.xs = hGen.xs.0


d. Fue necesario porque el caso inicial no era lo suficientemente fuerte como para obtener el resultado que pedia.


3.

a. “Dado un arreglo A de N elementos, sumar los elementos de A que son menores a la suma de sus antecesores".

Const A : array[0,N) of Int, N : Int;
Var r : Int;
{N >= 0}
S
{r =〈 Σ i : 0 <= i < N ∧ A.i <〈 Σ j : 0 <= j < i : A.j 〉: A.i 〉}

4.

Const N : Int ; A : Array[0, N ) of Int ;
Var r : Bool;
{N >= 0}
S
{r =〈 ∃ i : 0 <= i < N : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉}

a. A = [−1, 2, 5, 1]

N=4

i ∈ (0,1,2,3)

Caso i=0, j ∈ ()

〈 ∃ i : 0 <= i < 4 : [−1, 2, 5, 1].0 >〈 ∑ j : 0 <= j < 0 : [].j 〉〉=
〈 ∃ i : 0 <= i < 4 : -1 > 0 〉= False

Caso i=1, j ∈ (0)

〈 ∃ i : 0 <= i < 4 : [−1, 2, 5, 1].1 >〈 ∑ j : 0 <= j < 1 : [-1].j 〉〉=
〈 ∃ i : 0 <= i < 4 : 2 > -1 〉= True

Caso i = 2, j ∈ (0,1)

〈 ∃ i : 0 <= i < 4 : [−1, 2, 5, 1].2 >〈 ∑ j : 0 <= j < 2 : [-1, 2].j 〉〉=
〈 ∃ i : 0 <= i < 4 : 5 > 1 〉= True

Casi i=3, j ∈ (0,1,2)

〈 ∃ i : 0 <= i < 4 : [−1, 2, 5, 1].3 >〈 ∑ j : 0 <= j < 3 : [-1, 2, 5].j 〉〉=
〈 ∃ i : 0 <= i < 4 : 1 > 6 〉= False

La expresion es Verdadera para la lista dada.

b.

Const N : Int ; A : Array[0, N ) of Int ;
Var r : Bool;
{N >= 0}
S
{r =〈 ∃ i : 0 <= i < N : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉}

Voy a hacer un ciclo que deberia quedar de la siguiente forma:

{N >= 0}
S0
{I}
do B ->
    {I ∧ B}
    S0
    {I}
od
{r =〈 ∃ i : 0 <= i < N : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉}

Ahora voy a derivar el cuerpo del ciclo:

{I ∧ B}
S0
{I}

Una invariante puede ser:
I : r =〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n <= N
Propongo B : n<N e introduzco la variable n.

{r =〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n <= N ∧ n<N}
r, n = R, E
{r =〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n <= N}

≡ {Obligacion de prueba}

{r =〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n <= N ∧ n<N}
=>
{R =〈 ∃ i : 0 <= i < E : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= E <= N}

≡ {pruebo con E:=n+1}

R =〈 ∃ i : 0 <= i < n+1 : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n+1 <= N

≡ {por hip, n<N => n+1<=N}

R =〈 ∃ i : 0 <= i < n+1 : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉

≡ {logica y particion de rango}

R =〈 ∃ i : i = n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∨〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉

≡ {rango unitario}

R = A.n >〈 ∑ j : 0 <= j < n : A.j 〉∨〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉

≡ {hip}

R = r ∨ A.n >〈 ∑ j : 0 <= j < n : A.j 〉

Necesito fortalecer en invariante, para eso, voy a hacer otra I' a base de I:

I' : {I ∧ k =〈 ∑ j : 0 <= j < n : A.j 〉}

Con esta nueva invariante. debo derivar nuevamente el ciclo:

{r =〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n <= N ∧ k =〈 ∑ j : 0 <= j < n : A.j 〉 ∧ n<N}
r, n, k = R, n+1, F
{r =〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n <= N ∧ k =〈 ∑ j : 0 <= j < n : A.j 〉}

≡ {Obligacion de prueba}

{r =〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n <= N ∧ k =〈 ∑ j : 0 <= j < n : A.j 〉 ∧ n<N}
=>
{R =〈 ∃ i : 0 <= i < n+1 : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n+1 <= N ∧ F =〈 ∑ j : 0 <= j < n+1 : A.j 〉}

≡ {por hip, n<N => n+1<=N}

R =〈 ∃ i : 0 <= i < n+1 : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ F =〈 ∑ j : 0 <= j < n+1 : A.j 〉

≡ {logica y particion de rango}

R =〈 ∃ i : i = n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∨〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ F =〈 ∑ j : 0 <= j < n+1 : A.j 〉

≡ {rango unitario}

R = A.n >〈 ∑ j : 0 <= j < n : A.j 〉∨〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ F =〈 ∑ j : 0 <= j < n+1 : A.j 〉

≡ {hip}

R = r ∨ A.n >〈 ∑ j : 0 <= j < n : A.j 〉∧ F =〈 ∑ j : 0 <= j < n+1 : A.j 〉

≡ {logica y particion de rango}

R = r ∨ A.n >〈 ∑ j : 0 <= j < n : A.j 〉∧ F =〈 ∑ j : j = n : A.j 〉+〈 ∑ j : 0 <= j < n : A.j 〉

≡ {rango unitario}

R = r ∨ A.n >〈 ∑ j : 0 <= j < n : A.j 〉∧ F = A.n +〈 ∑ j : 0 <= j < n : A.j 〉

≡ {hip}

R = r ∨ A.n > k ∧ F = A.n + k

Ahora, voy a derivar la inicializacion:

{N >= 0}
r, n, k = R0, E0, F0
{r =〈 ∃ i : 0 <= i < n : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= n <= N ∧ k =〈 ∑ j : 0 <= j < n : A.j 〉}

≡ {Obligacion de prueba}

{N >= 0}
=>
{R0 =〈 ∃ i : 0 <= i < E0 : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= E0 <= N ∧ F0 =〈 ∑ j : 0 <= j < E0 : A.j 〉}

≡ {Propongo R0:=False, E0:=0, F0:=0}

False =〈 ∃ i : 0 <= i < 0 : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉∧ 0 <= 0 <= N ∧ 0 =〈 ∑ j : 0 <= j < 0 : A.j 〉

≡ {rango vacio x2 e hip N>=0}

False = False

≡ {reflexividad del =}

True

El programa completo quedaria:

Const N : Int ; A : Array[0, N ) of Int ;
Var r : Bool, k : Int;
{N >= 0}
r, n, k = False, 0, 0;
do n<N ->
    r, n, k = r ∨ A.n > k, n+1, A.n + k;
od
{r =〈 ∃ i : 0 <= i < N : A.i >〈 ∑ j : 0 <= j < i : A.j 〉〉}