Hecho en clase:

proc swap(in/out a : array[n..m] of int; out p1, p2 : int)
    var tmp : int;
    tmp := a[p1]
    a[p1] := a[p2]
    a[p2] := tmp
end proc

proc ordenar_sel(in/out a : array[n..m] of int)
    var aux : int;
    for pos := n to (m-1) do
        aux := pos_min_desde(a, pos)
        swap(a, pos, aux)
    od
end proc

fun pos_min_desde(a : array[n..m] of int; pizq : int) ret posm : int
    posm := pizq
    for p := pizq + 1 to m do
        if a[p] < a[posm] then
            posm := p
        fi
    od
end fun


Practico 1:

3)

fun estaOrdenado(a : array[1..n] of int) ret res : bool
    res := true
    for pos := 1 to (n-1) do
        if a[pos] > a[pos+1] then
            res := false
        fi
    od
end fun

¿Qué hace? El algoritmo verifica si la lista dada está ordenada en forma ascendente.
¿Cómo lo hace? El algoritmo recorre la lista posicion por posicion y compara el actual elemento con el siguiente,
si al menos se cumple una vez que el actual elemento es menor al siguiente, entonces la funcion retorna
false. Si esto no se cumple en ningun momento, la funcion retorna true. El for va hasta n-1 porque si yo estoy
comparando el elemento actual con el siguiente, cuando llegue a n, se va a salir de rango.


5)

a)

t := 0
for i := 1 to n do
    for j := 1 to n^2 do
        for k := 1 to n^3 do
            t := t + 1
        od
    od
od

= ops(t := 0) + 
    (for i := 1 to n do
        for j := 1 to n^2 do
            for k := 1 to n^3 do
                t := t + 1
            od
        od
    od)
= 1 + Σ (i=1, n) * Σ (j=1, n^2) * Σ (k=1, n^3) ops (t := t + 1)
= 1 + Σ (i=1, n) * Σ (j=1, n^2) * Σ (k=1, n^3) * 1
= 1 + n * (1+2+3+4+.....+i) * n^2 * (1+2+3+4+.....+j) * n^3 * (1+2+3+4+.....+k)
= 1 + n * i * n^2 * j * n^3 * k
= 1 + n^6 * i * j * k


b)

t := 0
for i := 1 to n do
    for j := 1 to i do
        for k := j to j + 3 do
            t := t + 1
        od
    od
od

= ops (t := 0) + 
    (for i := 1 to n do 
        for j := 1 to i do 
            for k := j to j + 3 do 
                t := t + 1 
            od 
        od 
    od)
= 1 + Σ (i=1, n) ops(
    for j := 1 to i do 
        for k := j to j + 3 do 
            t := t + 1 
        od 
    od))
= 1 + Σ (i=1, n) Σ (j=1, n) ops(
    for k := j to j + 3 do 
        t := t + 1 
    od ))
= 1 + Σ (i=1, n) Σ (j=1, i) Σ (k=j, j+3) ops (t := t + 1)
= 1 + Σ (i=1, n)  *  Σ (j=1, i) *  Σ (k=j, j+3) * 1
= 1 + Σ (i=1, n)  *  Σ (j=1, i) *  Σ (k=j, j+3) * 1
= 1 + n * (1 + 2 + 3 +4 + 5 +... i) * (4 + 5 + 6 … j+3)
= 1 + n * i * j+3