1.a

proc f1(in n : nat)
    if n ≤ 1 then skip
    else
        for i := 1 to 8 do f1(n div 2) od
        for i := 1 to n^3 do t := 1 od
    fi
end proc


r(n) = 0 si n <= 1

r(n) = sum({1,8}, r(n/2)) + sum({1,n^3}, 1) = 8*r(n/2) + n^3 -> a=8, b=2, k=3
=> n^3 * log n

1.b

proc f2(in n : nat)
    for i := 1 to n do
        for j := 1 to i do t := 1 od
    od
    if n > 0 then
        for i := 1 to 4 do f2(n div 2) od
    fi
end proc

"primera parte" = sum({1,n}, sum({1,i}, 1)) = sum({1,n}, i) = n

r(n) = n si n <= 0

r(n) = sum({1,4}, r(n/2)) = 4*r(n/2) + n -> a=4, b=2, k=1
=> n^(log_2_*4)



2.a

fun has_top(a: array[1..n] of nat) ret res : nat
    var k
    res := true
    k := 1
    while k < n-1 do
        if a[k+1] < a[k+2] then
            k := k + 1
        else
            res := false
        fi
    od
end fun

2.b

fun top(a: array[1..n] of nat) ret k : nat
    k := 1
    while k < n ∧ a[k] < a[k+1] do
        k := k + 1
    od
end fun

2.c

fun binary_top(a: array[1..n] of nat) ret k: nat
    k := binary_top_rec(a, 1, n)
end fun

fun is_top(a: array[1..n] of nat, i: nat) ret b: bool
    b := false
    if (i = 1 ∨ a[i] > a[i-1]) ∧ (i = n ∨ a[i] > a[i+1]) then
        b := true
    fi
end fun

fun lft_top(a: array[1..n] of nat, i: nat) ret b: bool
    b := false
    if i > n ∨ a[i-1] > a[i] then
        b := true
    fi
end fun

fun rgt_top(a: array[1..n] of nat, i: nat) ret b: bool
    b := false
    if i < n ∨ a[i] < a[i+1] then
        b := true
    fi
end fun

fun binary_top_rec(a: array[1..n] of nat, lft, rgt: nat) ret k: nat
    var mid: nat
    mid := (lft + rgt) / 2
    if is_top(a, mid) then k := mid
    else
        if lft_top(a, mid) then k := binary_top_rec(a, lft, mid-1)
        else
            if rgt_top(a, mid) then k := binary_top_rec(a, mid+1, rgt) fi
        fi
    fi
end fun


2.d

b:

sum({1, n-1}, k + 1) = n

c:

si is_top() => 0

si lft_top() o rgt_top() => 1*r(n) + 1 = log n


3

fun minimo(a : array[1..n] of nat, i, k : nat) ret m : nat
    if i = k then 
        m := a[i]
    else
        j := (i + k) div 2
        m := min(minimo(a, i, j), minimo(a,j+1,k))
    fi
end fun


r(n) = 1 si i = k

r(n) = 1 + f(n/2) + f(n/2) = n^0 + 2*f(n/2) -> a=2, b=2, k=0
=> n^(log_2_2) = n^1 = n


4.a

n*log(2^n) < 2^n < 2^n*log(n) < n!*log(n)


5.a

n^4 + K * f(n/L)

K=1, L=1

n^4 * log(n)


5.b

K=1, L=2

n^4


5.c

n^4 + 32 * f(n/2)

n^(log_2_32) = n^5



6.a

proc a(in n: nat)
    var x: nat
    x := 0
    for i:=1 to n do
        for j:=1 to n do
            x := x + 1
        od
    od
    var k: nat
    for i:=1 to 2 do
        k := n
        while k < 1 do
            k := k / 2
        od
    od
end proc

6.b

proc b(in n: nat)
    var x: nat
    x := 0
    for i:=1 to n do
        for j:=1 to n do
            x := x + 1
        od
    od
    x := b(n)
end proc

6.c

proc b(in n: nat)
    var x: nat
    x := 0
    for i:=n to 1 do
        
    od
    x := b(n)
end proc
