1.

type Vertex = Nat

type Edge = tuple
        v1 : Vertex
        v2 : Vertex
        cost : Nat
end tuple

type Graph = tuple
        vertices : Set of Vertex
        edges : Set of Edge
end tuple

fun Prim(G : Graph, k: Vertex) ret T: Set of Edge
    var c: Edge
    var C: Set of Vertex
    C:= copy_set(G.vertices)
    elim(C,k)
    T:= empty_set()
    do (not is_empty_set(C)) →
        c := "selecciono arista de costo mínimo tal que
        c.v1 ∈ C y c.v2 !∈ C, ó c.v2 ∈ C y c.v1 !∈ C"
        if member(c.v1,C) then 
            elim(C,c.v1)
        else 
            elim(C,c.v2)
        fi
        add(T,c)
    od
end fun


1.a

var orig_vertex: Vertex
orig_vertex := 5

var graph: Graph
graph := ({1..8}, {w1..wn})

# ejecuto Prim
k = 5
C = {1,2,3,4,5,6,7,8}
T = {}
elim(C,5)
C = {1,2,3,4,6,7,8}
# iteracion 1
    c = (2,5,1)
    elim(C, 2)
    C = {1,3,4,6,7,8}
    T = {2}
# iteracion 2
    c = (2,4,2)
    elim(C,4)
    C = {1,3,6,7,8}
    T = {2,4}
# iteracion 3
    c = (3,4,5)
    elim(C,3)
    C = {1,6,7,8}
    T = {2,4,3}
# iteracion 4
    c = (1,3,3)
    elim(C,1)
    C = {6,7,8}
    T = {2,4,3,1}
# iteracion 5
    c = (1,6,3)
    elim(C,6)
    C = {7,8}
    T = {2,4,3,1,6}
# iteracion 6
    c = (6,7,5)
    elim(C,7)
    C = {8}
    T = {2,4,3,1,6,7}
# iteracion 7
    c = (6,7,5)
    elim(C,8)
    C = {}
    T = {2,4,3,1,6,7,8}


2.

fun Dijkstra(L: array[1..n,1..n] of Nat, v: Nat) ret D: array[1..n] of Nat
    var c: Nat
    var C: Set of Nat
    for i := 1 to n do 
        add(C,i) 
    od
    elim(C,v)
    for j:= 1 to n do 
        D[j]:= L[v,j] 
    od
    do (not is_empty_set(C)) →
        c:= "elijo elemento c de C tal que D[c] sea mínimo"
        elim(C,c)
        for j in C do 
            D[j]:= min(D[j], D[c] + L[c,j]) 
        od
    od
end fun


C = {1,2,3,4,5,6,7,8}
elim(C,1)
C = {2,3,4,5,6,7,8}
D = {0,7,3,0,0,3,5,8}
# iteracion 1
    c = 3
    elim(C,3)
    C = {2,4,5,6,7,8}
    D = {0,7,3,0,0,3,0,8}



3.

fun fuel(E: array[1..n,1..n] of nat, C: array[1..n] of nat, v, L: nat) ret D: array[1..n] of Nat
    var c: nat
    elim(C,v)
    for j := 1 to n do 
        D[j]:= L[v,j] 
    od
    while ¬list_empty(C) ∧ L > 0 do
        c := "elijo elemento c de C tal que D[c] sea mínimo"
        elim(C,c)
        for j in C do 
            D[j] := min(D[j], D[c] + L[c,j]) 
        od
    od
end fun